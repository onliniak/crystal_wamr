crystal_doc_search_index_callback({"repository_name":"crystal_wamr","body":"# crystal_wamr\n\nTODO: Write a description here\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     crystal_wamr:\n       github: onliniak/crystal_wamr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"crystal_wamr\"\n\nwasm = CrystalWamr::WASM.new\n\nargv = Array(Int32).new\nargv << 8\np wasm.exec(File.read(\"fib.wasm\"), \"fib\", argv) # => fib function return: 21\n\nargv = Array(Int32).new\nargv << 2\nargv << 3\np wasm.exec(File.read(\"math.wasm\"), \"pow\", argv, \"This is my custom message\") # => This is my custom message 8\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/onliniak/crystal_wamr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Rafael Pszenny](https://github.com/onliniak) - creator and maintainer\n","program":{"html_id":"crystal_wamr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"crystal_wamr","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal_wamr/CrystalWamr","path":"CrystalWamr.html","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bindings.cr","line_number":1,"url":null},{"filename":"src/crystal_wamr.cr","line_number":4,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"TODO: Write documentation for `CrystalWamr`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"CrystalWamr.html\">CrystalWamr</a></code></p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal_wamr/CrystalWamr/WASM","path":"CrystalWamr/WASM.html","kind":"class","full_name":"CrystalWamr::WASM","name":"WASM","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/bindings.cr","line_number":2,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"exec(wasm_file:String,function_name:String,argv:Array(Int32),msg:String=\"#{function_name}functionreturn:\",io_error=IO::Memory.new,stack_size=8092,heap_size=8092)-instance-method","name":"exec","doc":"Example:\n```\nwasm = CrystalWamr::WASM.new\nwasm.exec(*wasm_file* = absolute path to file, *function_name*, *argv* = array of arguments, *msg* = print custom message, *io_error*, *stack_size*, *heap_size*)\n```","summary":"<p>Example: <code>wasm = CrystalWamr::WASM.new wasm.exec(*wasm_file* = absolute path to file, *function_name*, *argv* = array of arguments, *msg* = print custom message, *io_error*, *stack_size*, *heap_size*)</code></p>","abstract":false,"args":[{"name":"wasm_file","doc":null,"default_value":"","external_name":"wasm_file","restriction":"String"},{"name":"function_name","doc":null,"default_value":"","external_name":"function_name","restriction":"String"},{"name":"argv","doc":null,"default_value":"","external_name":"argv","restriction":"Array(Int32)"},{"name":"msg","doc":null,"default_value":"\"#{function_name} function return:\"","external_name":"msg","restriction":"String"},{"name":"io_error","doc":null,"default_value":"IO::Memory.new","external_name":"io_error","restriction":""},{"name":"stack_size","doc":null,"default_value":"8092","external_name":"stack_size","restriction":""},{"name":"heap_size","doc":null,"default_value":"8092","external_name":"heap_size","restriction":""}],"args_string":"(wasm_file : String, function_name : String, argv : Array(Int32), msg : String = \"#{function_name} function return:\", io_error = IO::Memory.new, stack_size = 8092, heap_size = 8092)","args_html":"(wasm_file : String, function_name : String, argv : Array(Int32), msg : String = <span class=\"s\">&quot;</span><span class=\"i\">#{</span>function_name<span class=\"i\">}</span><span class=\"s\"> function return:&quot;</span>, io_error = <span class=\"t\">IO</span><span class=\"t\">::</span><span class=\"t\">Memory</span>.<span class=\"k\">new</span>, stack_size = <span class=\"n\">8092</span>, heap_size = <span class=\"n\">8092</span>)","location":{"filename":"src/bindings.cr","line_number":50,"url":null},"def":{"name":"exec","args":[{"name":"wasm_file","doc":null,"default_value":"","external_name":"wasm_file","restriction":"String"},{"name":"function_name","doc":null,"default_value":"","external_name":"function_name","restriction":"String"},{"name":"argv","doc":null,"default_value":"","external_name":"argv","restriction":"Array(Int32)"},{"name":"msg","doc":null,"default_value":"\"#{function_name} function return:\"","external_name":"msg","restriction":"String"},{"name":"io_error","doc":null,"default_value":"IO::Memory.new","external_name":"io_error","restriction":""},{"name":"stack_size","doc":null,"default_value":"8092","external_name":"stack_size","restriction":""},{"name":"heap_size","doc":null,"default_value":"8092","external_name":"heap_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibWasm.wasm_runtime_init\nmymodule = LibWasm.wasm_runtime_load(wasm_file, wasm_file.size, io_error.to_s, io_error.bytesize)\nmodule_inst = LibWasm.wasm_runtime_instantiate(mymodule, stack_size, heap_size, io_error.to_s, io_error.bytesize)\nfunc = LibWasm.wasm_runtime_lookup_function(module_inst, function_name, \"(i32i32)\")\nexec_env = LibWasm.wasm_runtime_create_exec_env(module_inst, stack_size)\nif LibWasm.wasm_runtime_call_wasm(exec_env, func, argv.size, argv)\n  return \"#{msg} #{argv[0]}\"\nelse\n  LibWasm.wasm_runtime_get_exception(module_inst)\nend\nLibWasm.wasm_runtime_destroy_exec_env(exec_env)\nLibWasm.wasm_runtime_deinstantiate(module_inst)\nLibWasm.wasm_runtime_unload(mymodule)\nLibWasm.wasm_runtime_destroy\n"}}],"macros":[],"types":[]}]}]}})