crystal_doc_search_index_callback({"repository_name":"crystal_wamr","body":"# crystal_wamr\n\nTODO: Write a description here\n\nTested with [WAMR](https://github.com/bytecodealliance/wasm-micro-runtime) 1.2.3 and 2.1.0\n\n**No WASI Support** </br>\n**No Imports Support** </br>\n**WASM32 a.k.a. Browser** </br>\n**Custom Native Functions Implementation not compatible with other runtimes**\n\nIf you need extensions like WASI/WASIX check out [wasmer-crystal](https://github.com/naqvis/wasmer-crystal) better.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     crystal_wamr:\n       github: onliniak/crystal_wamr\n   ```\n\n2. Run `shards install`\n\n### Replit\n\n   ```nix\n   #replit.nix\n   { pkgs }: {\n     deps = [\n       pkgs.crystal\n       pkgs.shards\n       pkgs.openssl\n       pkgs.pkg-config\n       pkgs.pcre2\n       pkgs.wamr\n     ];\n   }\n   ```\n\n### FreeBSD\n\n```sh\n git clone https://github.com/bytecodealliance/wasm-micro-runtime.git\n cd wasm-micro-runtime/product-mini/platforms/freebsd\n mkdir build && cd build\n cmake ..\n make\n mv iwasm /usr/local/bin/iwasm\n mv libiwasm.so /usr/local/lib/libiwasm.so\n mv libvmlib.a /usr/local/lib/libvmlib.a\n crystal init app myapp\n cd myapp # && shards install\n cd lib/crystal_wamr\n iwasm --version # check if iwasm is installed\n crystal spec # check if libiwasm.so is installed\n```\n\n#### Server\n\nYou must add -Wl,-rpath=ABSOLUTE_PATH to gcc.\n\n0. ``` rm /usr/local/lib/libiwasm.so /usr/local/lib/libvmlib.a /usr/local/bin/iwasm ```\n1. ``` cd wasm-micro-runtime/product-mini/platforms/freebsd/build && make ```\n2. ``` mv iwasm.so /server/iwasm.so && mv libvmlib.a /server/libvmlib.a && mv /usr/local/bin/crystal /server/crystal && mv /usr/local/bin/shards /server/shards  ```\n3. Build on server.\n```sh\nchmod +x crystal\nchmod +x shards\nmkdir lib/crystal # Crystal will look for .so files in this directory by default. Problem is, the executable itself does not use this directory.\ncp libiwasm.so lib/crystal/libiwasm.so\ncp libvmlib.a lib/crystal/libvmlib.a\n./crystal init app test\nmkdir test/extra\ncp libiwasm.so test/extra/libiwasm.so\ncp libvmlib.a test/extra/libvmlib.a\nmv crystal test/crystal\nmv shards test/shards\ncd test\n./shards install\nnano lib/crystal_wamr/src/crystal_wamr.cr # add new line before @[Link(\"iwasm\")] => @[Link(ldflags: \"-Wl,-rpath=/usr/home/onliniak/domains/test.onliniak.ct8.pl/public_html/test/extra\")] # !!! MUST BE ABSOLUTE PATH\ntouch main.cr\n./crystal build main.cr\n./main # check if linking works\n```\n\n## Usage\n\nThe shard is divided into 3 parts: \n\n0. ``` cd lib/crystal_wamr && crystal spec ``` => create example wasm files in spec directory\n\n1. exec_once runs the WASM file and returns its result\n\n```crystal\nrequire \"crystal_wamr\"\n\nwasm = CrystalWamr::WASM.new\n\np wasm.exec_once(File.read(\"lib/crystal_wamr/spec/fib.wasm\"), \"fib\", [8]) # => 21\n```\n\n2. exec loads the WASM file, runs several functions and closes the WASM file\n\n```crystal\n wasm.exec(File.read(\"lib/crystal_wamr/array.wasm\"), {\n     \"newarr\" => [5],\n     \"newarra\" => [10],\n     \"newarrb\" => [15],\n     \"count\" => [0],\n     \"first\" => [0],\n     \"last\" => [0]\n     })\n p wasm.return_hash # {\"newarr\" => 5, \"newarra\" => 10, \"newarrb\" => 15, \"count\" => 3, \"first\" => 5, \"last\" => 15}\n```\n```c\nextern int array[0] = 0;\nextern int size = 0;\n\nextern void newarr(int a){\n  array[size] = a;\n  size++;\n}\n\nextern void newarra(int a){\n  array[size] = a;\n  size++;\n}\n\nextern void newarrb(int a){\n  array[size] = a;\n  size++;\n}\n\nextern int count(){\n  return size;\n}\n\nextern int first(){\n  return array[0]; \n}\n\nextern int last(){\n  return array[size - 1];\n}\n```\n\n2.1. Read strings\n\n```crystal\ncrystal_wamr_return_string(File.read(\"string.wasm\"), \"string\") # \"abcd\"\n```\n\n```c\nconst char* word = \"abcd\";\n\nextern int string(int s){\n  int r = word[s];\n\n  return r;\n}\n```\n\n3. exec_json lets you configure the library's operation with a json file.\n\n```crystal\nrequire \"http/server\"\nrequire \"crystal_wamr\"\nrequire \"./config\"\n\nwasm = CrystalWamr::WASM.new\nENV[\"PORT\"] = \"8080\"\nENV[\"HOST\"] = \"0.0.0.0\"\n\nconfig = CrystalWamr::WamrConfig.from_json(%({\n  \"file\": \"lib/crystal_wamr/spec/math.wasm\",\n  \"func\": [\n    {\n      \"name\": \"add\",\n      \"input\": [\n        {\n          \"argv\": {\n            \"int\": 2\n          }\n        },\n        {\n          \"argv\": {\n            \"var\": \"$URL\",\n            \"sys\": {\n              \"name\": \"cbrt\",\n              \"argv\": []\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"mul\",\n      \"input\": [\n        {\n          \"argv\": {\n            \"int\": 2\n          }\n        },\n        {\n          \"argv\": {\n            \"var\": \"add\"\n          }\n        }\n      ]\n    }\n  ]\n  }))\n\nserver = HTTP::Server.new do |context|\n  wasm.exec_json(CrystalWamr::WamrConfig.from_json(File.read(\"config.json\")), context.request.path)\n\n  context.response.content_type = \"text/plain\"\n  context.response.print wasm.return_hash.to_s\nend\n\naddress = server.bind_tcp ENV[\"HOST\"], ENV[\"PORT\"].to_i\nserver.listen\n```\n```crystal\n# config.cr\nmodule CrystalWamr\n  class WASM\n    def native_functions(sys, functions, index, url_path : Array(Int32))\n      argv = [] of Int32\n      if sys.argv.size == 0\n        argv = url_path\n    elsif sys.argv.size > 0\n      argv = sys.argv\n      else\n        argv = url_path\n      end\n      if sys.name == \"cbrt\"\n        functions[index] << Math.cbrt(argv[0]).to_i\n      end\n      if sys.name == \"hypot\"\n        functions[index] << Math.hypot(argv[0], argv[1]).to_i\n      end\n    end\n  end\nend\n```\n### JSON\n```json\n{\n\"file\": \"lib/crystal_wamr/spec/math.wasm\",\n ```\nfile = filename with extension .aot or .wasm\n\n```json\n \"func\": [\n    {\n      \"name\": \"add\",\n      \"input\": [\n        {\n          \"argv\": {\n            \"int\": 2\n          }\n        },\n        {\n          \"argv\": {\n            \"var\": \"$URL\",\n            \"sys\": {\n              \"name\": \"cbrt\",\n              \"argv\": []\n            }\n          }\n        }\n      ]\n    },\n```\n```\nfunc\n  name = name of the WASM function\n  input = array of Int32 function parameters\n    argv\n      int = const int32\n      var = The result from the execution of the WASM function\n        $URL # curl myweb.eu/27/17/10\n          argv[0] = 27\n          argv[1] = 17\n          argv[2] = 10\n      sys # looking for line: if sys.name == \"cbrt\" inside config.cr\n        name\n        argv = array of arguments for native crystal function. Leave empty when $URL in use.\n\n```\n```\n]\n  })\n```\n```\nThe add function retrieves the web address. For example, myweb.eu/27 => $URL = 27.\nIt then passes $URL to the Math.cbrt function and we have 3. Finally, it adds the result to 2.\n\nThe mul function multiplies the result of the add function (5 in the example) by 2. \n```\n\nTODO: Write usage instructions here\n\n### Strings\n\nTip: Crystal will remove blank characters.\n\n```crystal\ncrystal_wamr_return_string(File.read(\"string.wasm\"), \"string\") # \"Lorem ipsum dolor\"\ncrystal_wamr_return_string(File.read(\"string.wasm\"), \"string\", x) # Returns x characters. Default = 16.\n```\n\n```c\nconst char* word = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";\n\nextern int string(int s){\n  int r = word[s];\n\n  return r;\n}\n```\n\n## Compilation\n\n### Clang\n\n1. https://github.com/WebAssembly/wasi-sdk/releases/latest\n2. ```./wasi-sdk-23.0-x86_64-linux/bin/clang --target=wasm32 -nostdlib -Wl,--no-entry -Wl,--export-all -o main.wasm main.c```\n\n### C4WA\n\n1. https://github.com/kign/c4wa/releases/latest\n2. ```./c4wa-compile-0.5/bin/c4wa-compile main.c```\n\n## Expected performance\n\n### Wizard mode\n\n```c\nextern int add(int a, int b){\n  return a + b;\n}\n```\n\n```bash\n hyperfine --warmup 3 './single_aot' './hash_aot' 'iwasm -f add add.wasm 8 12' -i -N\n Benchmark 1: ./single_aot\n   Time (mean ± σ):      14.1 ms ±   4.1 ms    [User: 1.4 ms, System: 10.5 ms]\n   Range (min … max):    10.2 ms …  36.4 ms    131 runs\n\n   Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.\n\n Benchmark 2: ./hash_aot\n   Time (mean ± σ):      13.5 ms ±   3.0 ms    [User: 1.1 ms, System: 10.6 ms]\n   Range (min … max):     9.7 ms …  28.8 ms    202 runs\n\n Benchmark 3: iwasm -f add add.wasm 8 12\n   Time (mean ± σ):      16.5 ms ±   6.3 ms    [User: 0.7 ms, System: 10.9 ms]\n   Range (min … max):     9.9 ms …  59.4 ms    260 runs\n\n   Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.\n\n Summary\n   ./hash_aot ran\n     1.05 ± 0.38 times faster than ./single_aot\n     1.22 ± 0.54 times faster than iwasm -f add add.wasm 8 12\n```\n\n### Another example\n\n``` cd lib/crystal_wamr && crystal spec --tag \"aot-benchmark\" ```\n``` cd lib/crystal_wamr && crystal spec --tag \"native-benchmark\" ```\n\n[on server] The identical code in the crystal and C4WA -> AOT has a similar speed. However, it is quite possible that I made some serious mistakes in the code and the speed of this library will be lower than iwasm. If it bothers you PR welcome.\n\n## Known Issues\n\n### Invalid memory access (signal 11) at address 0x0\n\n- If you are using AOT make sure wamrc is in the same version as iwasm.\n- This shard don't support WASI and Imports.\n- The function you are trying to run returns an array, char or any other type that is not int, double, float, long\n\n### Stack guard pages\n\nWrong iwasm installed\nTry ``` cd lib/crystal_wamr && crystal spec ```\n\nReinstall shard: ``` rm shard.lock && shards install ```\n\n```\nFailed to init stack guard pages\n[10:07:17:747 - 2781C4C18000]: wasm_runtime_malloc failed: memory hasn't been initialized.\n\nInvalid memory access (signal 11) at address 0x0\n[0x417699] ???\n[0x417668] ???\n[0x7def2f] ???\n[0x7de4f4] ???\n```\n\n## Development\n\nWAMR API → https://bytecodealliance.github.io/wamr.dev/docs/html/wasm__export_8h.html\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/onliniak/crystal_wamr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Rafael Pszenny](https://github.com/onliniak) - creator and maintainer\n","program":{"html_id":"crystal_wamr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"crystal_wamr","program":true,"enum":false,"alias":false,"const":false,"macros":[{"html_id":"crystal_wamr_return_string(file,func,max_word_length=16)-macro","name":"crystal_wamr_return_string","doc":"```\ncrystal_wamr_return_string(File.read(\"string.wasm\"), \"string\") # \"abcd\"\n```","summary":"<p><code>crystal_wamr_return_string(File.read(&quot;string.wasm&quot;), &quot;string&quot;) # &quot;abcd&quot;</code></p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":""},{"name":"func","external_name":"func","restriction":""},{"name":"max_word_length","default_value":"16","external_name":"max_word_length","restriction":""}],"args_string":"(file, func, max_word_length = 16)","args_html":"(file, func, max_word_length = <span class=\"n\">16</span>)","location":{"filename":"src/crystal_wamr.cr","line_number":8,"url":null},"def":{"name":"crystal_wamr_return_string","args":[{"name":"file","external_name":"file","restriction":""},{"name":"func","external_name":"func","restriction":""},{"name":"max_word_length","default_value":"16","external_name":"max_word_length","restriction":""}],"visibility":"Public","body":"    string = \"\"\n    wasm = CrystalWamr::WASM.new\n  \n{% for i in (0..max_word_length) %}\n        char = wasm.exec_once({{ file }}, {{ func }}, [{{ i }}])\n        string += char.not_nil!.unsafe_chr\n  {% end %}\n\n    is_last_char_nil = string.byte_index '\\u0000'\n\n    if is_last_char_nil == nil\n    p string\n    \nelse\n    last = is_last_char_nil\n    last_char = last.not_nil! - 1\n    p string[0..last_char]\n    \nend\n\n"}}],"types":[{"html_id":"crystal_wamr/CrystalWamr","path":"CrystalWamr.html","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr","abstract":false,"locations":[{"filename":"src/crystal_wamr.cr","line_number":27,"url":null},{"filename":"src/crystal_wamr_config.cr","line_number":3,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"TODO: Write documentation for `CrystalWamr`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"CrystalWamr.html\">CrystalWamr</a></code></p>","types":[{"html_id":"crystal_wamr/CrystalWamr/Argv","path":"CrystalWamr/Argv.html","kind":"class","full_name":"CrystalWamr::Argv","name":"Argv","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_wamr_config.cr","line_number":24,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/crystal_wamr_config.cr","line_number":25,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"int:Int32|Nil-instance-method","name":"int","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":27,"url":null},"def":{"name":"int","return_type":"Int32 | ::Nil","visibility":"Public","body":"@int"}},{"html_id":"int=(int:Int32|Nil)-instance-method","name":"int=","abstract":false,"args":[{"name":"int","external_name":"int","restriction":"Int32 | ::Nil"}],"args_string":"(int : Int32 | Nil)","args_html":"(int : Int32 | Nil)","location":{"filename":"src/crystal_wamr_config.cr","line_number":27,"url":null},"def":{"name":"int=","args":[{"name":"int","external_name":"int","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@int = int"}},{"html_id":"sys:Sys|Nil-instance-method","name":"sys","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":29,"url":null},"def":{"name":"sys","return_type":"Sys | ::Nil","visibility":"Public","body":"@sys"}},{"html_id":"sys=(sys:Sys|Nil)-instance-method","name":"sys=","abstract":false,"args":[{"name":"sys","external_name":"sys","restriction":"Sys | ::Nil"}],"args_string":"(sys : Sys | Nil)","args_html":"(sys : <a href=\"../CrystalWamr/Sys.html\">Sys</a> | Nil)","location":{"filename":"src/crystal_wamr_config.cr","line_number":29,"url":null},"def":{"name":"sys=","args":[{"name":"sys","external_name":"sys","restriction":"Sys | ::Nil"}],"visibility":"Public","body":"@sys = sys"}},{"html_id":"var:String|Nil-instance-method","name":"var","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":28,"url":null},"def":{"name":"var","return_type":"String | ::Nil","visibility":"Public","body":"@var"}},{"html_id":"var=(var:String|Nil)-instance-method","name":"var=","abstract":false,"args":[{"name":"var","external_name":"var","restriction":"String | ::Nil"}],"args_string":"(var : String | Nil)","args_html":"(var : String | Nil)","location":{"filename":"src/crystal_wamr_config.cr","line_number":28,"url":null},"def":{"name":"var=","args":[{"name":"var","external_name":"var","restriction":"String | ::Nil"}],"visibility":"Public","body":"@var = var"}}]},{"html_id":"crystal_wamr/CrystalWamr/Func","path":"CrystalWamr/Func.html","kind":"class","full_name":"CrystalWamr::Func","name":"Func","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_wamr_config.cr","line_number":11,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/crystal_wamr_config.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"input:Array(Input)-instance-method","name":"input","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":15,"url":null},"def":{"name":"input","return_type":"Array(Input)","visibility":"Public","body":"@input"}},{"html_id":"input=(input:Array(Input))-instance-method","name":"input=","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"Array(Input)"}],"args_string":"(input : Array(Input))","args_html":"(input : Array(<a href=\"../CrystalWamr/Input.html\">Input</a>))","location":{"filename":"src/crystal_wamr_config.cr","line_number":15,"url":null},"def":{"name":"input=","args":[{"name":"input","external_name":"input","restriction":"Array(Input)"}],"visibility":"Public","body":"@input = input"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":14,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_wamr_config.cr","line_number":14,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}}]},{"html_id":"crystal_wamr/CrystalWamr/Input","path":"CrystalWamr/Input.html","kind":"class","full_name":"CrystalWamr::Input","name":"Input","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_wamr_config.cr","line_number":18,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/crystal_wamr_config.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"argv:Argv-instance-method","name":"argv","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":21,"url":null},"def":{"name":"argv","return_type":"Argv","visibility":"Public","body":"@argv"}},{"html_id":"argv=(argv:Argv)-instance-method","name":"argv=","abstract":false,"args":[{"name":"argv","external_name":"argv","restriction":"Argv"}],"args_string":"(argv : Argv)","args_html":"(argv : <a href=\"../CrystalWamr/Argv.html\">Argv</a>)","location":{"filename":"src/crystal_wamr_config.cr","line_number":21,"url":null},"def":{"name":"argv=","args":[{"name":"argv","external_name":"argv","restriction":"Argv"}],"visibility":"Public","body":"@argv = argv"}}]},{"html_id":"crystal_wamr/CrystalWamr/Sys","path":"CrystalWamr/Sys.html","kind":"class","full_name":"CrystalWamr::Sys","name":"Sys","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_wamr_config.cr","line_number":32,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/crystal_wamr_config.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"argv:Array(Int32)-instance-method","name":"argv","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":36,"url":null},"def":{"name":"argv","return_type":"Array(Int32)","visibility":"Public","body":"@argv"}},{"html_id":"argv=(argv:Array(Int32))-instance-method","name":"argv=","abstract":false,"args":[{"name":"argv","external_name":"argv","restriction":"Array(Int32)"}],"args_string":"(argv : Array(Int32))","args_html":"(argv : Array(Int32))","location":{"filename":"src/crystal_wamr_config.cr","line_number":36,"url":null},"def":{"name":"argv=","args":[{"name":"argv","external_name":"argv","restriction":"Array(Int32)"}],"visibility":"Public","body":"@argv = argv"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":35,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_wamr_config.cr","line_number":35,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}}]},{"html_id":"crystal_wamr/CrystalWamr/WamrConfig","path":"CrystalWamr/WamrConfig.html","kind":"class","full_name":"CrystalWamr::WamrConfig","name":"WamrConfig","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_wamr_config.cr","line_number":4,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"crystal_wamr/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/crystal_wamr_config.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"file:String-instance-method","name":"file","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":7,"url":null},"def":{"name":"file","return_type":"String","visibility":"Public","body":"@file"}},{"html_id":"file=(file:String)-instance-method","name":"file=","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String"}],"args_string":"(file : String)","args_html":"(file : String)","location":{"filename":"src/crystal_wamr_config.cr","line_number":7,"url":null},"def":{"name":"file=","args":[{"name":"file","external_name":"file","restriction":"String"}],"visibility":"Public","body":"@file = file"}},{"html_id":"func:Array(Func)-instance-method","name":"func","abstract":false,"location":{"filename":"src/crystal_wamr_config.cr","line_number":8,"url":null},"def":{"name":"func","return_type":"Array(Func)","visibility":"Public","body":"@func"}},{"html_id":"func=(func:Array(Func))-instance-method","name":"func=","abstract":false,"args":[{"name":"func","external_name":"func","restriction":"Array(Func)"}],"args_string":"(func : Array(Func))","args_html":"(func : Array(<a href=\"../CrystalWamr/Func.html\">Func</a>))","location":{"filename":"src/crystal_wamr_config.cr","line_number":8,"url":null},"def":{"name":"func=","args":[{"name":"func","external_name":"func","restriction":"Array(Func)"}],"visibility":"Public","body":"@func = func"}}]},{"html_id":"crystal_wamr/CrystalWamr/WASM","path":"CrystalWamr/WASM.html","kind":"class","full_name":"CrystalWamr::WASM","name":"WASM","abstract":false,"superclass":{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_wamr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_wamr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_wamr.cr","line_number":30,"url":null}],"repository_name":"crystal_wamr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crystal_wamr/CrystalWamr","kind":"module","full_name":"CrystalWamr","name":"CrystalWamr"},"instance_methods":[{"html_id":"add_to_hash(name,value)-instance-method","name":"add_to_hash","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(name, value)","args_html":"(name, value)","location":{"filename":"src/crystal_wamr.cr","line_number":53,"url":null},"def":{"name":"add_to_hash","args":[{"name":"name","external_name":"name","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"@hash[name] = value"}},{"html_id":"exec(wasm_file:String,functions=Hash(String,Array(Int32)).new,output=Hash(String,String).new)-instance-method","name":"exec","doc":"```\nwasm.exec(File.read(\"lib/crystal_wamr/array.wasm\"), {\n  \"newarr\"  => [5],\n  \"newarra\" => [10],\n  \"newarrb\" => [15],\n  \"count\"   => [0],\n  \"first\"   => [0],\n  \"last\"    => [0],\n})\np wasm.return_hash # {\"newarr\" => 5, \"newarra\" => 10, \"newarrb\" => 15, \"count\" => 3, \"first\" => 5, \"last\" => 15}\n```","summary":"<p><code>wasm.exec(File.read(&quot;lib/crystal_wamr/array.wasm&quot;), { &quot;newarr&quot; =&gt; [5], &quot;newarra&quot; =&gt; [10], &quot;newarrb&quot; =&gt; [15], &quot;count&quot; =&gt; [0], &quot;first&quot; =&gt; [0], &quot;last&quot; =&gt; [0], }) p wasm.return_hash # {&quot;newarr&quot; =&gt; 5, &quot;newarra&quot; =&gt; 10, &quot;newarrb&quot; =&gt; 15, &quot;count&quot; =&gt; 3, &quot;first&quot; =&gt; 5, &quot;last&quot; =&gt; 15}</code></p>","abstract":false,"args":[{"name":"wasm_file","external_name":"wasm_file","restriction":"String"},{"name":"functions","default_value":"Hash(String, Array(Int32)).new","external_name":"functions","restriction":""},{"name":"output","default_value":"Hash(String, String).new","external_name":"output","restriction":""}],"args_string":"(wasm_file : String, functions = Hash(String, Array(Int32)).new, output = Hash(String, String).new)","args_html":"(wasm_file : String, functions = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">Array</span>(<span class=\"t\">Int32</span>)).new, output = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">String</span>).new)","location":{"filename":"src/crystal_wamr.cr","line_number":164,"url":null},"def":{"name":"exec","args":[{"name":"wasm_file","external_name":"wasm_file","restriction":"String"},{"name":"functions","default_value":"Hash(String, Array(Int32)).new","external_name":"functions","restriction":""},{"name":"output","default_value":"Hash(String, String).new","external_name":"output","restriction":""}],"visibility":"Public","body":"LibWasm.wasm_runtime_init\nmymodule = LibWasm.wasm_runtime_load(wasm_file, wasm_file.size, \"\", 0)\nmodule_inst = LibWasm.wasm_runtime_instantiate(mymodule, 8092, 8092, \"\", 0)\nfunctions.each do |x, argv|\n  if output.has_key?(x)\n    a = output[x]\n    argv << @hash[a]\n  end\n  function = LibWasm.wasm_runtime_lookup_function(module_inst, x, \"\")\n  exec_env = LibWasm.wasm_runtime_create_exec_env(module_inst, 8092)\n  if LibWasm.wasm_runtime_call_wasm(exec_env, function, argv.size, argv)\n    add_to_hash(x, argv[0])\n  else\n    LibWasm.wasm_runtime_get_exception(module_inst)\n  end\n  functions.delete(x)\nend\nexec_env = LibWasm.wasm_runtime_create_exec_env(module_inst, 8092)\nLibWasm.wasm_runtime_destroy_exec_env(exec_env)\nLibWasm.wasm_runtime_deinstantiate(module_inst)\nLibWasm.wasm_runtime_unload(mymodule)\nLibWasm.wasm_runtime_destroy\n"}},{"html_id":"exec_json(config:CrystalWamr::WamrConfig,path:String,functions=Hash(String,Array(Int32)).new,output=Hash(String,String).new)-instance-method","name":"exec_json","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"CrystalWamr::WamrConfig"},{"name":"path","external_name":"path","restriction":"String"},{"name":"functions","default_value":"Hash(String, Array(Int32)).new","external_name":"functions","restriction":""},{"name":"output","default_value":"Hash(String, String).new","external_name":"output","restriction":""}],"args_string":"(config : CrystalWamr::WamrConfig, path : String, functions = Hash(String, Array(Int32)).new, output = Hash(String, String).new)","args_html":"(config : <a href=\"../CrystalWamr/WamrConfig.html\">CrystalWamr::WamrConfig</a>, path : String, functions = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">Array</span>(<span class=\"t\">Int32</span>)).new, output = <span class=\"t\">Hash</span>(<span class=\"t\">String</span>, <span class=\"t\">String</span>).new)","location":{"filename":"src/crystal_wamr.cr","line_number":104,"url":null},"def":{"name":"exec_json","args":[{"name":"config","external_name":"config","restriction":"CrystalWamr::WamrConfig"},{"name":"path","external_name":"path","restriction":"String"},{"name":"functions","default_value":"Hash(String, Array(Int32)).new","external_name":"functions","restriction":""},{"name":"output","default_value":"Hash(String, String).new","external_name":"output","restriction":""}],"visibility":"Public","body":"config.func.map do |i|\n  functions[i.name] = [] of Int32\n  i.input.map do |x|\n    function_args(x.argv.int, x.argv.var, x.argv.sys, functions, i.name, output, path)\n  end\nend\nexec(File.read(config.file), functions, output)\n"}},{"html_id":"exec_once(wasm_file:String,function_name:String,argv:Array(Int32))-instance-method","name":"exec_once","doc":"p wasm.exec_once(File.read(\"lib/crystal_wamr/spec/fib.wasm\"), \"fib\", [8]) # => 21\n```","summary":"<p>p wasm.exec_once(File.read(&quot;lib/crystal_wamr/spec/fib.wasm&quot;), &quot;fib&quot;, [8]) # =&gt; 21 ```</p>","abstract":false,"args":[{"name":"wasm_file","external_name":"wasm_file","restriction":"String"},{"name":"function_name","external_name":"function_name","restriction":"String"},{"name":"argv","external_name":"argv","restriction":"Array(Int32)"}],"args_string":"(wasm_file : String, function_name : String, argv : Array(Int32))","args_html":"(wasm_file : String, function_name : String, argv : Array(Int32))","location":{"filename":"src/crystal_wamr.cr","line_number":121,"url":null},"def":{"name":"exec_once","args":[{"name":"wasm_file","external_name":"wasm_file","restriction":"String"},{"name":"function_name","external_name":"function_name","restriction":"String"},{"name":"argv","external_name":"argv","restriction":"Array(Int32)"}],"visibility":"Public","body":"LibWasm.wasm_runtime_init\nmymodule = LibWasm.wasm_runtime_load(wasm_file, wasm_file.size, \"\", 0)\nmodule_inst = LibWasm.wasm_runtime_instantiate(mymodule, 8092, 8092, \"\", 0)\nfunc = LibWasm.wasm_runtime_lookup_function(module_inst, function_name, \"\")\nexec_env = LibWasm.wasm_runtime_create_exec_env(module_inst, 8092)\nif LibWasm.wasm_runtime_call_wasm(exec_env, func, argv.size, argv)\n  return argv[0]\nelse\n  LibWasm.wasm_runtime_get_exception(module_inst)\nend\nLibWasm.wasm_runtime_destroy_exec_env(exec_env)\nLibWasm.wasm_runtime_deinstantiate(module_inst)\nLibWasm.wasm_runtime_unload(mymodule)\nLibWasm.wasm_runtime_destroy\n"}},{"html_id":"function_args(value:Int32,variable:String|Nil,sys,functions,index,output,path)-instance-method","name":"function_args","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"},{"name":"variable","external_name":"variable","restriction":"String | ::Nil"},{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"args_string":"(value : Int32, variable : String | Nil, sys, functions, index, output, path)","args_html":"(value : Int32, variable : String | Nil, sys, functions, index, output, path)","location":{"filename":"src/crystal_wamr.cr","line_number":61,"url":null},"def":{"name":"function_args","args":[{"name":"value","external_name":"value","restriction":"Int32"},{"name":"variable","external_name":"variable","restriction":"String | ::Nil"},{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"visibility":"Public","body":"functions[index] << value"}},{"html_id":"function_args(value:Nil,variable:String,sys:CrystalWamr::Sys,functions,index,output,path)-instance-method","name":"function_args","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String"},{"name":"sys","external_name":"sys","restriction":"CrystalWamr::Sys"},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"args_string":"(value : Nil, variable : String, sys : CrystalWamr::Sys, functions, index, output, path)","args_html":"(value : Nil, variable : String, sys : <a href=\"../CrystalWamr/Sys.html\">CrystalWamr::Sys</a>, functions, index, output, path)","location":{"filename":"src/crystal_wamr.cr","line_number":82,"url":null},"def":{"name":"function_args","args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String"},{"name":"sys","external_name":"sys","restriction":"CrystalWamr::Sys"},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"visibility":"Public","body":"x = [0, 0, 0, 0, 0]\nif variable == \"$URL\"\n  sas = (/(([0-9]+)\\/?([0-9]*)\\/?([0-9]*)\\/?([0-9]*)\\/?([0-9]*)\\/?)/).match(path)\n  if sas != nil\n    i = 0\n    sas.not_nil!.captures.each do |v|\n      if ((v == nil) || (v == \"\")) || (i == 0)\n      else\n        x.insert(0, v.not_nil!.to_i)\n      end\n      i = i + 1\n    end\n  end\nend\nnative_functions(sys, functions, index, x)\n"}},{"html_id":"function_args(value:Nil,variable:String,sys:Nil,functions,index,output,path)-instance-method","name":"function_args","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String"},{"name":"sys","external_name":"sys","restriction":"Nil"},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"args_string":"(value : Nil, variable : String, sys : Nil, functions, index, output, path)","args_html":"(value : Nil, variable : String, sys : Nil, functions, index, output, path)","location":{"filename":"src/crystal_wamr.cr","line_number":97,"url":null},"def":{"name":"function_args","args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String"},{"name":"sys","external_name":"sys","restriction":"Nil"},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"visibility":"Public","body":"output[index] = variable"}},{"html_id":"function_args(value:Nil,variable:String|Nil,sys:Nil,functions,index,output,path)-instance-method","name":"function_args","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String | ::Nil"},{"name":"sys","external_name":"sys","restriction":"Nil"},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"args_string":"(value : Nil, variable : String | Nil, sys : Nil, functions, index, output, path)","args_html":"(value : Nil, variable : String | Nil, sys : Nil, functions, index, output, path)","location":{"filename":"src/crystal_wamr.cr","line_number":101,"url":null},"def":{"name":"function_args","args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String | ::Nil"},{"name":"sys","external_name":"sys","restriction":"Nil"},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"visibility":"Public","body":""}},{"html_id":"function_args(value:Nil,variable:String|Nil,sys,functions,index,output,path)-instance-method","name":"function_args","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String | ::Nil"},{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"args_string":"(value : Nil, variable : String | Nil, sys, functions, index, output, path)","args_html":"(value : Nil, variable : String | Nil, sys, functions, index, output, path)","location":{"filename":"src/crystal_wamr.cr","line_number":65,"url":null},"def":{"name":"function_args","args":[{"name":"value","external_name":"value","restriction":"Nil"},{"name":"variable","external_name":"variable","restriction":"String | ::Nil"},{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"output","external_name":"output","restriction":""},{"name":"path","external_name":"path","restriction":""}],"visibility":"Public","body":""}},{"html_id":"native_functions(sys,functions,index,url_path:String)-instance-method","name":"native_functions","abstract":false,"args":[{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"url_path","external_name":"url_path","restriction":"String"}],"args_string":"(sys, functions, index, url_path : String)","args_html":"(sys, functions, index, url_path : String)","location":{"filename":"src/crystal_wamr.cr","line_number":68,"url":null},"def":{"name":"native_functions","args":[{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"url_path","external_name":"url_path","restriction":"String"}],"visibility":"Public","body":""}},{"html_id":"native_functions(sys,functions,index,url_path:Array(Int32))-instance-method","name":"native_functions","abstract":false,"args":[{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"url_path","external_name":"url_path","restriction":"Array(Int32)"}],"args_string":"(sys, functions, index, url_path : Array(Int32))","args_html":"(sys, functions, index, url_path : Array(Int32))","location":{"filename":"src/crystal_wamr.cr","line_number":71,"url":null},"def":{"name":"native_functions","args":[{"name":"sys","external_name":"sys","restriction":""},{"name":"functions","external_name":"functions","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"url_path","external_name":"url_path","restriction":"Array(Int32)"}],"visibility":"Public","body":"argv = [] of Int32\nif sys.argv.size == 0\n  argv = url_path\nelse\n  if sys.argv.size > 0\n    argv = sys.argv\n  else\n    argv = url_path\n  end\nend\n"}},{"html_id":"return_hash-instance-method","name":"return_hash","abstract":false,"location":{"filename":"src/crystal_wamr.cr","line_number":57,"url":null},"def":{"name":"return_hash","visibility":"Public","body":"return @hash"}}]}]}]}})